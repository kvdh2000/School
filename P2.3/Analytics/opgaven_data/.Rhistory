setwd("D:/GitHub/School/P2.3/Analytics/opgaven_data")
data=read.csv(twts.csv)
data=read.csv("twts.csv")
View(data)
str(data)
data&ID <- NULL
data&ID = NULL
data$ID <- NULL
data$User <- NULL
data$ <- NULLDate
data$Date <- NULL
data$Query <- NULL
data=read.csv("twts.csv", stringsAsFactors = FALSE)
str(data)
data$ID <- NULL
data$User <- NULL
data$Query <- NULL
data$Date <- NULL
data$Negative <- as.factor(data$Sentiment <= 1)
str(data)
table(data$Negative)
install.packages("tm")
install.packages("SnowballC")
library(tm)
library(SnowballC)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
data %>% distinct()
Duplicatad(data)
duplicatad(data)
duplicated(data)
corpus = Corpus(VectorSource(data$Tweet))
corpus
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removewords, stopwords("English"))
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, stemDocument)
frequencies = DocumentTermMatrix(corpus)
corpus
corpus = tm_map(corpus, PlainTextDocument)
frequencies = DocumentTermMatrix(corpus)
corpus
corpus
corpus = Corpus(VectorSource(data$Tweet))
corpus
corpus[[0]]
corpus[[0]]$content
corpus[1]
corpus[1]$content
corpus = tm_map(corpus, tolower)
corpus
corpus = tm_map(corpus, removePunctuation)
corpus
corpus = tm_map(corpus, removewords, stopwords("English"))
corpus
corpus = tm_map(corpus, stemDocument)
corpus
frequencies = DocumentTermMatrix(corpus)
str(frequencies)
inspect(frequencies)
frequencies
sparse=removeSparseTerms(frequencies, 0.995)
sparse
sparseData = as.data.frame(as.matrix(sparse))
str(sparseData)
colnames(sparseData) = make.names(colnames(sparseData))
str(sparseData)
sparseData$Negative = data$Negative
str(sparseData)
install.packages("caTools")
libary(caTools)
library(caTools)
set.seed(8602)
split = sample.split(sparseData$Negative, SplitRatio = 0.7)
trainData = subset(sparseData, split==TRUE)
testData = subset(sparseData, split==FALSE)
fitControl=trainControl(method="cv", number = 10)
install.packages("caret")
install.packages("e1071")
library(caret)
library(e1071)
fitControl=trainControl(method="cv", number = 10)
cartGrid=expand.grid(.cp=(1:50)*0.01)
cv=train(Churn~.,data=data,method="rpart", trControl=fitControl,tuneGrid=cartGrid)
cv=train(Negative~.,data=trainData,method="rpart", trControl=fitControl,tuneGrid=cartGrid)
cv
plot(cv)
tree=rpart(Negative~.,data=rainData,method="class",control=rpart.control(cp=0,04)
tree=rpart(Negative~.,data=rainData,method="class",control=rpart.control(cp=0,04))
> tree2=rpart(Negative~.,data=data,method="class",control=rpart.control(cp=0,04))
> tree2=rpart(Negative~.,data=trainData,method="class",control=rpart.control(cp=0,04))
tree=rpart(Negative~.,data=trainData,method="class",control=rpart.control(cp=0,04))
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(rpart)
tree=rpart(Negative~.,data=trainData,method="class",control=rpart.control(cp=0,04))
prp(tree)
install.packages("rpart.plot")
library(rpart.plot)
library(rpart.plot)
prp(tree)
View(trainData)
conf(test$Negative)
source('D:/GitHub/School/P2.3/Analytics/opgaven_data/conf.R')
source('D:/GitHub/School/P2.3/Analytics/opgaven_data/conf.R')
conf(test$Negative)
conf(testData$Negative)
conf(testData$Negative, 0.5)
prediction  = predict(tree, type="response")
predictTreeROC=predict(tree,newdata=test)
predictTreeROC=predict(tree,newdata=testData)
treeROC=prediction(predictTreeROC[,2], testData$Negative)
install.packages("ROCR")
library(ROCR)
treeROC=prediction(predictTreeROC[,2], testData$Negative)
treePerf=performance(treeROC,"tpr","fpr")
plot(treePerf, colorize=TRUE,print.cutoffs.at=seq(0,1,0.1))
abline(0.1)
abline(0,1)
AUC=as.numeric(performance(treeROC, "auc")@y.values)
AUC
tree=rpart(Negative~.,data=trainData,method="class",control=rpart.control(cp=0.04))
prp(tree)
predictTreeROC=predict(tree,newdata=testData)
treeROC=prediction(predictTreeROC[,2], testData$Negative)
treePerf=performance(treeROC,"tpr","fpr")
plot(treePerf, colorize=TRUE,print.cutoffs.at=seq(0,1,0.1))
abline(0,1)
AUC=as.numeric(performance(treeROC, "auc")@y.values)
AUC
conf(testData$Negative, 0.9)
conf(testData$Negative, 0.5)
conf(testData$Negative, 0.6)
conf(testData$Negative, 0.7)
conf(testData$Negative, 0.8)
conf(testData$Negative, 0.9)
conf(testData$Negative, 0.3)
conf(testData$Negative, 0.2)
conf(testData$Negative, 0.5)
plot(prediction)
plot(predictTreeROC)
table(predictTreeROC)
table(tree)
predicttest= predict (tree, newdata=testData)
t=table(testData$Negative, predicttest[,2] > d)
t=table(testData$Negative, predicttest[,2] > 0.5)
t
plot(d)
plot(t)
t<- NULL
