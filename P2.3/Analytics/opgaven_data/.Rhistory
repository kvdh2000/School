setwd("D:/GitHub/School/P2.3/Analytics/opgaven_data")
data=red.csv("telcotrain.csv")
data=read.csv("telcotrain.csv")
data$X <- NULL
data$ZIP <- NULL
model=glm(Churn~IP+VMP+NVM+TDCH+TECH+TNCH+TIC+TICH+CSC, data=data, family="binomial")
summary(model)
source('D:/GitHub/School/P2.3/Analytics/opgaven_data/conf.R')
test=read.csv("telcotest.csv")
test$X <- NULL
test$IP <- NULL
conf(test$Churn, 0.6)
test=read.csv("telcotest.csv")
test$X <- NULL
test$ZIP <- NULL
conf(test$Churn, 0.6)
prediction <- predict(model,type="response")
ROCRpred = prediction(prediction,data$Churn)
install.packages("ROCR")
library(ROCR)
prediction <- predict(model,type="response")
ROCRpred = prediction(prediction,data$Churn)
ROCRperf=performance(ROCRpred,"tpr","fpr")
plot(ROCRperf,colorize=TRUE,print.cutoffs.at=seq(0,1,0.1))
abline(0,1)
auc=as.numeric(performance(ROCRpred, "auc")@y.values)
auc
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
tree=rpart(Churn~.,data=data,method="class", control=rpart.control(minbucket = 25))
prp(tree)
tree=rpart(Churn~.,data=data,method="class", control=rpart.control(minbucket = 5))
prp(tree)
tree=rpart(Churn~.,data=data,method="class", control=rpart.control(minbucket = 100))
prp(tree)
tree=rpart(Churn~.,data=data,method="class", control=rpart.control(minbucket = 1))
prp(tree)
tree=rpart(Churn~.,data=data,method="class", control=rpart.control(minbucket = 1000))
prp(tree)
tree=rpart(Churn~.,data=data,method="class", control=rpart.control(minbucket = 1))
prp(tree)
tree=rpart(Churn~.,data=data,method="class", control=rpart.control(minbucket = 0.000011))
prp(tree)
source('D:/GitHub/School/P2.3/Analytics/opgaven_data/conf.R')
conf(test$Churn, 0.6)
source('D:/GitHub/School/P2.3/Analytics/opgaven_data/conf.R')
conf(test$Churn, 0.6)
source('D:/GitHub/School/P2.3/Analytics/opgaven_data/conf.R')
source('D:/GitHub/School/P2.3/Analytics/opgaven_data/conf.R')
conf(test$Churn, 0.6)
conf(test$Churn, 0.6)
source('D:/GitHub/School/P2.3/Analytics/opgaven_data/conf.R')
conf(test$Churn, 0.6)
View(conf)
predictTreeROC=predict(tree,newdata=test)
treeROC=prediction(predictTreeROC[,2], test$Churn)
treePerf=performance(treeROC,"tpr","fpr")
plot(treePerf, colorize=TRUE,print.cutoffs.at=seq(0,1,0.1))
abline(0.1)
abline(0,1)
AUC-as.numeric(performance(predictTreeROC, "auc")@y,values)
AUC=as.numeric(performance(predictTreeROC, "auc")@y,values)
AUC=as.numeric(performance(treeROC, "auc")@y,values)
AUC=as.numeric(performance(treeROC, "auc")@y.values)
AUC
data$Churn=as.factor(data$Churn)
set.seed(666)
install.packages("caret")
install.packages("e1071")
install.packages("e1071")
library(caret)
library(e1071)
install.packages("caret")
library(caret)
fitControl=trainControl(method="cv", number = 10)
cartGrid=expand.grid(.cp=(1:50)*0.01)
cv=train(Churn~.,data=data,method="rpart", trControl=fitControl,tuneGrid=cartGrid)
cv
plot(cv)
tree2=rpart(Churn~.,data=data,method="class",control=rpart.control(cp=0,01))
prp(tree2)
predictTree2ROC=predict(tree2, newdata=test)
tree2ROC=prediction(predictTree2ROC[,2], test$Churn)
tree2Perf=performance(tree2ROC, "tpr", "fpr")
plot(tree2Perf, colorize=TRUE,print.cutoffs.at=seq(0,1,0.1))
abline(0,1)
AUC=as.numeric(performance(tree2ROC, "auc")@y.values)
AUC
conf(test$Churn, 0.6)
source('D:/GitHub/School/P2.3/Analytics/opgaven_data/conf.R')
conf(test$Churn, 0.6)
source('D:/GitHub/School/P2.3/Analytics/opgaven_data/conf.R')
